image: python:3.9-bullseye

stages:
  - test
  - release

variables:
  # Change pip's config file and cache directory to be inside the project directory since we can
  # only cache local items. Pip will see these environment variables, so we don't need to explicitly
  # pass them.
  PIP_CONFIG_FILE: "$CI_PROJECT_DIR/.config/pip/pip.conf"
  CI_GROUP_ID: 1245

.configure_pip_template: &configure_pip
  # Configure pip to download packages from our private group registry.
  # Instead of a CI_JOB_TOKEN we use a persisting deploy token. The job token would only be
  # valid within a job and when caching this config file, the next job would fail to authenticate
  # (we could also recreate this file in every job with the current job token).
  # The group token is created in grp-alexandrov and inherited by contained projects.
  - mkdir -p $(dirname $PIP_CONFIG_FILE)
  - |
    echo "[global]
    index = https://$CI_DEPLOY_USER:$CI_DEPLOY_PASSWORD@$CI_SERVER_HOST/api/v4/groups/$CI_GROUP_ID/-/packages/pypi
    index-url = https://$CI_DEPLOY_USER:$CI_DEPLOY_PASSWORD@$CI_SERVER_HOST/api/v4/groups/$CI_GROUP_ID/-/packages/pypi/simple
    " > $PIP_CONFIG_FILE

.configure_pypi_template: &configure_pypi
  # Configure pypi to upload to our private project registry.
  # Twine only detects this file in ~/.pypirc
  - |
    echo "[distutils]
    index-servers =
        gitlab

    [gitlab]
    repository = ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi
    username = gitlab-ci-token
    password = ${CI_JOB_TOKEN}
    " > ~/.pypirc

# Unit tests
test:
  stage: test
  parallel:
    matrix:
      - PYTHON_VERSION:
        - "3.8"
        - "3.9"
        - "3.10"
        - "3.11"
  image: python:${PYTHON_VERSION}-bullseye
  before_script:
    - *configure_pip
    - pip install --quiet --upgrade pip
    - pip install --quiet pytest pytest-cov
    - pip install --quiet --editable .
  script:
    - coverage run -m pytest --junitxml=report.xml
    - coverage report
    - coverage xml
    # Demonstration
    - echo "Demo"; echo -e "from pytest_gitlab_fold import GitLabContext\nwith GitLabContext().folding_output('mysection', collapsed=True):\n    print('in section')" | python
  # The total coverage will be reported in the jobs list (not pipelines) and as a badge.
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      # This will display a new tab in gitlab pipelines view with coverage statistics
      junit: report.xml

# Release Python packages
release_package:
  stage: release
  before_script:
    - *configure_pip
    - *configure_pypi
    - pip install --quiet build twine
  script:
    - python -m build
    - twine upload -r gitlab dist/*
  when: manual
